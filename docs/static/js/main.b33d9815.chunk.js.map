{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputVAlue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAYhD,OACE,sBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZhB,SAAAP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCLdG,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DACR,mCACNC,EAFc,iDAEkCC,UACpDH,GAHkB,6BACR,oCADQ,SAKDI,MAAMF,GALL,cAKdG,EALc,gBAMGA,EAAKC,OANR,uBAMZC,EANY,EAMZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZlB,kBAgBbM,GAhBa,4CAAH,sDCENO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OADAc,QAAQC,IAAI,CAAEN,KAAIC,QAAOV,QAEvB,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHGS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAAAA,GAAa,IAAD,EACZd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACR1B,EAAOC,GAAU0B,MAAK,SAAAC,GACpBH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGZ,CAACtB,IAEGuB,EDb2BK,CAAa5B,GAAjCa,EADyB,EAC/BN,KAAce,EADiB,EACjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAClDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aETnBkB,EAAe,WAAO,IAAD,EACI3C,mBAAS,CAAC,MADd,mBACzB4C,EADyB,KACb7C,EADa,KAGhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG6C,EAAWrB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCTxB+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.b33d9815.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputVAlue] = useState('');\n  const handleInputChange = e => {\n    setInputVAlue(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories(cat => [inputValue, ...cat]);\n      setInputVAlue('');\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGif = async category => {\n  const key = 'fw5wj4Eqtf6hvTtlNGz1JBFoQlXcdGLz';\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=${key}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n  console.log({ id, title, url });\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from '../components/GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n      <div className=\"card-grid\">\n        {images.map(img => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getGif } from '../helpers/getGifs';\n\nexport const useFetchGifs = category => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGif(category).then(imgs => {\n      setstate({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([' ']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map(category => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}